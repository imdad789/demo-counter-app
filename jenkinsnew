pipeline{
    
    agent any 
    
    stages {
        
        stage('Git Checkout'){
            
            steps{
                
                script{
                    
                    git branch: 'main', url: 'https://github.com/imdad789/demo-counter-app.git'
                }
            }
        }
        stage('Maven build'){
            
            steps{
                
                script{
                    
                    sh 'mvn clean install'
                }
            }
        }
        stage('Static code analysis'){
            
            steps{
                
                script{
                    
                    withSonarQubeEnv(credentialsId: 'sonar-api') {
                        
                        sh 'mvn clean package sonar:sonar'
                    }
                  }
            }
        }
        stage('Nexus upload Repo'){
            
            steps{
                
                script{
                   def readPomVersion = readMavenPom file: 'pom.xml'
                   def nexusRepo = readPomVersion.version.endsWith("SNAPSHOT") ? 'demoapp-snapshot' : 'demoapp-release'
                    
                    nexusArtifactUploader artifacts: 
                    [
                        [
                            artifactId: 'springboot', 
                            classifier: '', file: 'target/Uber.jar', 
                            type: 'jar'
                        ]
                    ], 
                    credentialsId: 'nexus', 
                    groupId: 'com.example', 
                    nexusUrl: '52.66.158.37:8081', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: nexusRepo, 
                    version: "${readPomVersion.version}"
                }
            }
        }
         stage('Build Image') {
            steps {
                script {
                    sh 'docker image build -t ${JOB_NAME}:v1.${BUILD_ID} .'
                    sh 'docker image tag ${JOB_NAME}:v1.${BUILD_ID} imdad789/${JOB_NAME}:v1.${BUILD_ID}'
                    sh 'docker image tag ${JOB_NAME}:v1.${BUILD_ID} imdad789/${JOB_NAME}:latest'
                }
            }
        }
        stage('Push Docker Image to Hub') {
            steps {
                script {
                  withCredentials([string(credentialsId: 'dockerp', variable: 'docker_pass')]) {
                    sh 'docker login -u imdad789 -p ${docker_pass}'
                    sh 'docker image push imdad789/${JOB_NAME}:latest'
                    sh 'docker image push imdad789/${JOB_NAME}:v1.${BUILD_ID}'
                  }
                }
            }
        }
    }
}
